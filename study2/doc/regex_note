////////////////////////////////////
JS version

regex:
	JS:所有正则表达式均以/开头，所有特殊字符均用\转义

元字符

	^  定义了以什么开头  取反
	$  定义了以什么结尾
	.  匹配所有字符 \.匹配 .
	\w 匹配字母和数字
	\d 匹配数字
	\s 匹配空格(space,tab,enter等)

限定符

	*  0次或多次
	+  一次或多次
	?  0次或一次
   {n} 恰好n次; {m,n} m到n次; {m,} 至少m次
   (a|b) a或b
   [abc] abc中任意一个
   [a-z] a-z范围内任意一个
   [^a-z] 不在a-z范围内的任意一个

eg:

var regex = '(^|a)([xyz]*)(b|$)'
定义了一个以a开头，以b结尾，中间是xyz中的任意一个或多个的字符串
/////////////////////////////////////////


////////////////////////////////////////
java version(current)

. 匹配除了换行符外任意字符
\d [0-9]
\w [a-zA-Z0-9]
\s 任意空格键
\D [^\d]
\W [^\w]
\S [^\s]
[abc]  匹配abc中任意一个字符
[^abc] 匹配除了abc以外的任意一个字符
[a-z&&[^de]] a-z，但不包括d和e
[[abc][def]] [abcdef]
[0-9a-z] 匹配0-9、a-z任意一个字符
[-0-9] 0-9或者连字符-
[.*] .或者*，没有特殊含义
x?、x?? x出现0次或1次，多一个?为懒人字符，表示优先取最短，不再贪婪匹配
x*、x*? x出现0次或多次
x+、x+? 先出现1次或多次
x{m,n}、x{m,n}? x出现m到n次
x{m,}、x{m,}? x至少出现m次
x{n}、x{n}? x恰好出现n次
ab|cd 匹配ab或cd
(http|ftp|file) 匹配http或ftp或file
a(bc)+cd bc作为一个分组出现1次以上
<(\w+)>(.*)</\1> (\w+)捕获第一个分组，\1回溯引用该分组。eg: <html>hello</html>,(\w+) 表示html
(?<name>X) 给分组命名，eg: <(?<tag>\w+)>,(\w+)命名为tag
\k<name> 引用命名分组，eg: <(?<tag>\w+)>(.*)</\k<tag>>,\k引用了<tag>,表示(\w+)
(?:abc|def) 分组但不捕获，匹配adc或def

^ 默认是整个字符串的开始开始边界，多行模式是行的开始边界
$ 默认是整个字符串的结束边界，多行模式是行的结束边界，如果结尾是换行符，为换行符之前的边界
\A 总是匹配整个字符串的开始边界
\Z 总是匹配整个字符串的结束边界，如果结尾是换行符，匹配换行符之前的边界
\z 总是匹配整个字符串的结束边界，不管结尾是否是换行符
\b 匹配单词边界，边界一边是单词字符，另一边不是
(?=...) 肯定顺序环视，匹配边界，该边界右边的字符串匹配指定表达式
(?!...) 否定顺序环视，匹配边界，该边界右边的字符串不能匹配指定表达式
(?<=...) 肯定逆序环视，匹配边界，该边界左边的字符串匹配指定表达式
(?<!...) 否定逆序环视，匹配边界，该边界左边的字符串不能匹配指定表达式
(?i) 不区分大小写匹配
(?m) 多行模式，^匹配行开始，$匹配行结束
(?s) 单行模式，.匹配任意字符，包括换行符
\.\*\? 转义元字符为普通字符
[.*^(){}] 在字符组中，大部分元字符没有特殊含义
\\ \本身
\Q\E \Q到\E之间的所有字符视为普通字符

模板
1 邮编 (?<![0-9])[0-9]{6}(?![0-9]): 6位数字，左边不能是数字，右边不能是数字
2 手机号码 (?<![0-9])((0|\+86|0086)\s?)?1[34578][0-9]-?[0-9]{4}-?[0-9]{4}(?![0-9])
		11位数字，可能有连字符-，前面可能有0\+86\0086，左边不能是数字，右边不能是数字 


///////////////////////////////////////////




